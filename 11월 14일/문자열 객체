javascript 문자열

1. 텍스트를 저장하고 조작하기 위한 자료형
2. 따옴표 안에 쓰여진 0개 이사응 ㅣ문자
예
let txt = 'hong gildong'
let txt = "hong gildong"

3. 문자열을 둘러싼 따옴표와 일치하지 않으면 문자열 내에서 따옴표 사용 가능

-let txt1 = "it's alright"
-let txt2 = "he is called 'robin hood'"
-let txt3 = 'he is called "robin hood"'


length : 문자열으 ㅣ길이
1. 문자열의 길이

-let txt = 'ABCDEFGHUKLAGMNKQKZ'
-let length = txt.length ; //위 글자 갯수 나옴

이스케이프 문자열

1.백슬래시 사용 \

2, 특수문자를 문자열 문자로 변환
--------------
code  |  Result |  description
\'    | '       |   singgle quote
\"    | "       |   Double quote
\\    | \       |   Backslash

3 \" 시퀀스 : 문자열에 큰따옴표 삽입
- let txt = "we are the so-called \"vikings\" from the north"

4. \' 시퀀스  문자열에 작은 따옴표 삽입
-let txt = 'it\'s alright'

5. \\ 시퀀스 : 문자열에 백슬래시 삽입
-let txt = "the character \\ is called backslash."

6. 기타 이스케이프 시퀀스
----------------
code Result
----------------

\b Banckspace
\f Form Feed (공백)
\n New line
\r Carriage Return (줄 종결)
\t Horizontal Tabulator (공백)
\v Vertiacl Tabulator (공백)
 -이 6개의 이스케이프 문자는 타자기, 텔레타이프 및 팩스 기계를 제어하도록 설계

 -html에서는 적용되지 않음





* 긴코드 줄 끊기
1. 가독성을 위해 긴 코드를 여러 행으로 분리
2. 중단하기에 가장 좋은 위치느 ㄴ연산자 다음
 -document.getElementByid('exam').innerHTML =
 "hello dolly!";

 3. 단일 백슬레시를 사용하여 텍스트 문자열 내의 코드 줄 분리
 - document. getElementByid('exam').innerHTML = "hello \
 DOLLY!";
1) 일부 브라우저는 문자 뒤에 공백 허용 안함

4. 문자열 추가

-document.getElementByid('exam').innerHTML = 'hello' + 
'Dolly!';

5. 백슬래시로 코드 줄 분리
-document.getElementByid('exam').innerHTML = \
"hello Dolly!";



* 문자열 부분 추출
1.slice (start, end)  앞에서 쓰려면 그냥 정수, 뒤에서부터 표기하려면 -값 넣어주면됨 -값은 
마지막 인덱스값 전부터   (시작 index 바로 "다음" 글자)  하지만 - 값으로 셀때는 우리가 생각하는 순서부터 하면됨.
 let txt = '무궁화꽃이 피었습니다'
 꽃을  표시하려면 slice (3 , 4) 인덱스부터 1글자 표기할때임
  -값으로 꽃을 표시할때는   slice ( -9, -7) 이런식으로  셈을 해야함.

2. substring(start, end)
이것도 위랑 똑같이 값을 하나만 주면 그 순서부터 뒤에 다 나옴
-값으로을 주면 slice랑은 다르게  0보다 작은값은 0으로 처리함

3. substr(start, length)
string.substr(index 부터, n개 만큼 )
값을 하나만 주면 다나옴
이놈도 substring과 같이 -값이 들어가면 0으로 인식함



//////

문자치환

replace ()
1. 지정된 값을 문자열으 ㅣ다른 값으로 변경
2. replace() 메서드는 호출된 문자열을 변경하지 않고 새 문자열 반환
3. 첫번째 일치 항목만 변경
4. 모든 일치 항목을 바꾸려면  /g 플래그가 설정된 정규식 사용
5. 대, 소문자 구분
6. 대소문자를 구분하지 않으려면 정규 표현식을 /i 플래그(구별하지 않음) 사용
* 정규 표현식은 따옴표 없이 작성

string.replace('기존텍스트','바꿀텍스트')
let txt = '무궁화\n꽃이 \n피었다'
let result = txt.replace('무궁화','개나리')
result = '개나리꽃이 피었다'
txt = 변경사항 없음
원래 문자열을 변경하는게 아니라 새로 생성한다고 보면됨

이걸 html에 얹을려면
 \n이 한줄 띄우는건데  html은 이걸 인식 못하니
 document.write(txt.replace('\n','<br>'))
이런식으로 활용하는데 도움됨.
근데 한번만 바뀜
맨 앞에 나오는 문자의..
전체 문자를 원하는걸로 바꾸려면
정규식을 쓰거나 replaceAll을 사용하면됨
정규식은 개발자들이 미리 약속해둔 단축키 같은것임..
정규식은 => /규칙/플래그(옵션) 
이걸 변수에 담은뒤에 
txt.replace(/무궁화/g,"장미" )
  이렇게 정규식 사용가능함

정규식은 천천히 정리해도됨.
구글검색해서 정리해보자

let txt =  'html for behavior';
let result = txt.replace(/HTML/i, "javascript")
정규식중에 i는 대소문자 구분 X해줌
이런식으로 활용이 가능하니 정규식은 한번 정리해보자



global

*replaceAll()
1.문자열 모두 바꾸기
2. 바꿀 문자열 대신 정규식 지정 가능
3. 매개변수가 정규식이면 전역 플래그(g) 설정 필수





*대소문자 변환
1.toUpperCase();
2.toLowerCase();

let txt1 = "Hello World"
let txt2 = txt1.toUpperCase();
let txt3 = txt1.toLowerCase();


문자열 합치기
concat()
1.두개이상으 ㅣ문자열을 결합
let txt1 = 'hello'
let txt2 = 'world'
let txt3 = txt1.concat('구분기호',txt2)
// txt3   결과는 hello구분기호world 이렇게 합쳐짐 
let txt4 = 'qhqh'
여러 문자열을 연결시  ,로 구분해서 넣어도 됨



2. 더하기 연산자 대신 사용가능
txt = 'hello' + ' ' + 'world';
txt = 'hello'.concat('구분기호', 'world!')

3. 모든 문자열 메서드는 원래 문자열을 수정하지 않고 새 문자열을 반환
4. 문자열은 변경할 수 없으며 교체만 가능



*  문자열 채우기

1.padStart(길이, "채울 문자") : 주어진 길이에 도달할 때까지 문자열의 처음부터 다른 문자열 작성
-let padded = txt.padStart(4 , '0')
padStart()는 문자열 메서드이므로 숫자를 채우려면 숫자를 문자열로 변환

2. padEnd() : 주어진 길이에 도달할 때까지 문자열의 끝에서 다른 문자열 작성

**결과값이 문자열임

//  문자 추출
1. charAt(index)
-문자열의 지정된 인덱스(위치)에 있는 문자 반환

2. charCodeAt(index)
문자열의 지정된 인덱스에 있는 문자의 유니코드 반환

3.[] 속성 엑세스
 - 문자열을 배열처럼 표시 (배열X)
 - let txt = "HELLO WORLD";
 - let char = txt[0];
    E만 가져오고 싶으면
    txt[1] ->이렇게 쓰면 E만 가져와짐



 4. 문자가 없는 경우
  -charAt() : 빈 문자열 반환
  - [] : undefined 반환

  5. 문자열을 배열로 변환하여 사용 가능






* 공백제거
1. trim() : 문자열 양쪽의 공백제거
2. trimStart() : 문자열 시작 부분 공백 제거
3. trimEnd() : 문자열 끝 부분 공백 제거



* 문자열의 위치반환
 ----> [,] 생략가능함 이라는 표시임
1.indexOf ('문자열'[, 시작위치])
 - 첫번째 나타나는 문자열의 인덱스 반환
 - 텍스트를 찾을 수 없으면 -1 반환

 2. lastindexOf('문자열'[,시작위치])
 - 문자열의 끝부분부터 검색하여 인덱스 반환
 - 텍스트를 찾을 수 없으면 -1 반환

 3. search ('문자열')
 -문자열(또는 정규식)에 대한 문자열을 검색하고 일치하는 위치를 반환

 4. indexOf() 와 search()
 -indexOf() : 정규식 (강력한 검색 값) 사용불가
  - search() 두번째 인수 (시작위치) 사용불가.



*문자열 분리
1. split ('구분자') : 문자열을 분리하여 배열로 반환
2. 구분자가 생략되면 반환된 배열은 인덱스[0]에 전체 문자열 포함
3. 구분 기호가 "" 이면 글자 단위로 분리하여 배열로 반환


* class
1. JavaScript 객체용 템플릿
2. 객체가 아닌 객체에 대한 템플릿



* 문법
1. class 키워드 사용
2. constructor() 메소드를 반드시 추가
3. constructor() : 이름이 지정되어 있는 메소드

# 문법
class ClassName {
  constructor() { ... }
}

# 예
class Student {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
}



* 클래스 사용
1. 클래스가 있으면 클래스를 사용하여 객체 생성가능
2. 생성자 메서드(constructor)는 새 객체가 생성될 때 자동으로 호출
3. 생성자 메서드를 정의하지 않으면 빈 생성자 메서드를 자동으로 추가

# 형식
const myStudent1 = new Student("홍길동", 22);
const myStudent2 = new Student("김철수", 23);



* 클래스 방식에서 메서드 사용 방법
1. 객체 메서드와 동일한 구문으로 생성

# 문법
class ClassName {
  constructor() { ... }
  method1() { ... }
  method2() { ... }
}



* strict mode(엄격 모드)
1. 클래스의 구문은 "엄격 모드"로 작성
2. "strict mode" 규칙을 따르지 않으면 오류 발생



* 클래스 상속
1. extends 키워드 사용
2. 클래스 상속으로 생성된 클래스는 다른 클래스의 모든 메서드를 상속
3. super() 메서드는 부모 클래스 참조
4. 생성자 메서드에서 super() 메서드를 호출하여 부모의 생성자 메서드를 호출하고
5. 상속은 코드 재사용에 유용
6. 새 클래스를 만들 때 기존 클래스의 속성과 메서드 재사용



* getter와 setter
1. 클래스를 사용하면 getter와 setter 사용 가능
2. 값을 반환하기 전, 또는 설정하기 전에 값으로 특별한 작업을 수행하려는 경우
속성에 getter 및 setter를 사용 가능
3. get, set 키워드 사용
4. getter가 메서드인 경우에도 속성 값을 가져오려는 경우 괄호 사용 안함
5. getter/setter 메서드의 이름은 속성 이름과 같을 수 없음
- getter/setter를 실제 속성과 구분하기 위해 속성 이름 앞에 밑줄 문자 사용
6. setter 를 사용하려면 괄호 없이 속성 값을 설정할 때와 동일한 구문 사용



* Hoisting
1. 인터프리터가 코드를 실행하기 전에 함수, 변수, 클래스 또는 임포트(import)의 선언문을 해당 범위의 맨 위로 이동시키는 과정
2. 함수 및 기타 JavaScript 선언과 달리 클래스 선언은 호이스팅되지만 실행되지 않음
3. 클래스 선언 후 사용 가능



* 정적 메소드
1. 정적 클래스 메서드는 클래스 자체에 정의
2. static 객체에서 메서드를 호출할 수 없으며 객체 클래스에서만 호출 가능
